// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PsychologyAssessmentAPI.Data;

#nullable disable

namespace PsychologyAssessmentAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250819083515_InıtialCreate")]
    partial class InıtialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PsychologyAssessmentAPI.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 19, 8, 35, 14, 986, DateTimeKind.Utc).AddTicks(453),
                            Description = "Kaygı ve anksiyete ile ilgili sorular",
                            Name = "Anksiyete"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 19, 8, 35, 14, 986, DateTimeKind.Utc).AddTicks(1614),
                            Description = "Depresif belirtiler ile ilgili sorular",
                            Name = "Depresyon"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 19, 8, 35, 14, 986, DateTimeKind.Utc).AddTicks(1617),
                            Description = "Stres yönetimi ile ilgili sorular",
                            Name = "Stres"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 19, 8, 35, 14, 986, DateTimeKind.Utc).AddTicks(1618),
                            Description = "Uyku kalitesi ile ilgili sorular",
                            Name = "Uyku"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 19, 8, 35, 14, 986, DateTimeKind.Utc).AddTicks(1619),
                            Description = "Sosyal etkileşimler ile ilgili sorular",
                            Name = "Sosyal İlişkiler"
                        });
                });

            modelBuilder.Entity("PsychologyAssessmentAPI.Models.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 8, 19, 8, 35, 14, 986, DateTimeKind.Utc).AddTicks(7907),
                            IsActive = true,
                            Text = "Günlük yaşamda endişelendiğim durumlar sıklıkla aklımdan çıkmaz.",
                            Weight = 3
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 8, 19, 8, 35, 14, 986, DateTimeKind.Utc).AddTicks(8962),
                            IsActive = true,
                            Text = "Gelecek hakkında aşırı kaygı duyarım.",
                            Weight = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 8, 19, 8, 35, 14, 986, DateTimeKind.Utc).AddTicks(8965),
                            IsActive = true,
                            Text = "Önemli olaylar öncesinde fiziksel rahatsızlık (kalp çarpıntısı, terleme) yaşarım.",
                            Weight = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 8, 19, 8, 35, 14, 986, DateTimeKind.Utc).AddTicks(8966),
                            IsActive = true,
                            Text = "Çoğu zaman kendimi üzgün ve umutsuz hissederim.",
                            Weight = 3
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 8, 19, 8, 35, 14, 986, DateTimeKind.Utc).AddTicks(8966),
                            IsActive = true,
                            Text = "Eskiden hoşlandığım aktivitelere artık ilgi duymuyorum.",
                            Weight = 3
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 8, 19, 8, 35, 14, 986, DateTimeKind.Utc).AddTicks(8967),
                            IsActive = true,
                            Text = "Günlük görevleri yapmakta zorlanırım.",
                            Weight = 2
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 8, 19, 8, 35, 14, 986, DateTimeKind.Utc).AddTicks(8968),
                            IsActive = true,
                            Text = "İş/okul yükü nedeniyle sürekli baskı altında hissederim.",
                            Weight = 2
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 8, 19, 8, 35, 14, 986, DateTimeKind.Utc).AddTicks(8969),
                            IsActive = true,
                            Text = "Stresli durumlarda sakin kalmakta zorlanırım.",
                            Weight = 2
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 8, 19, 8, 35, 14, 986, DateTimeKind.Utc).AddTicks(8970),
                            IsActive = true,
                            Text = "Gece rahat uyuyabiliyorum.",
                            Weight = 2
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 8, 19, 8, 35, 14, 986, DateTimeKind.Utc).AddTicks(8971),
                            IsActive = true,
                            Text = "Sabah dinlenmiş olarak uyanırım.",
                            Weight = 2
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 8, 19, 8, 35, 14, 986, DateTimeKind.Utc).AddTicks(8975),
                            IsActive = true,
                            Text = "İnsanlarla rahatça iletişim kurabiliyorum.",
                            Weight = 1
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 8, 19, 8, 35, 14, 986, DateTimeKind.Utc).AddTicks(8976),
                            IsActive = true,
                            Text = "Sosyal ortamlarda kendimi rahat hissederim.",
                            Weight = 2
                        });
                });

            modelBuilder.Entity("PsychologyAssessmentAPI.Models.Entities.Question", b =>
                {
                    b.HasOne("PsychologyAssessmentAPI.Models.Entities.Category", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PsychologyAssessmentAPI.Models.Entities.Category", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
